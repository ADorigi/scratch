{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Installing Fluent(Fluentbit) in Kaytu to send logs to Cloudwatch</p>"},{"location":"digital-ocean/","title":"DigitalOcean","text":""},{"location":"digital-ocean/#overview","title":"Overview","text":"<p>This guide helps configure access to Opengovernance deployed on DigitalOcean Kubernetes, using NGINX Ingress Controller.</p>"},{"location":"digital-ocean/#contents","title":"Contents","text":"<ul> <li>Prerequisites</li> <li>Step 1: Installing NGINX Ingress Controller</li> <li>Step 2: Update DNS record</li> <li>Step 3: Configuring TLS Certificate using <code>cert-manager</code></li> <li>Step 4: Update the Application configuration</li> <li>Step 5: Deploying the Ingress</li> </ul>"},{"location":"digital-ocean/#prerequisites","title":"Prerequisites","text":"<ul> <li>Helm - Installation guide.</li> <li>Kubectl - Installation guide</li> <li>Opengovernance installed on a DigitalOcean Kubernetes Cluster.</li> <li>Access to modify DNS records of a domain.</li> </ul>"},{"location":"digital-ocean/#step-1-installing-nginx-ingress-controller","title":"Step 1: Installing NGINX Ingress Controller","text":"<p>Add the official nginx helm repository and update helm.</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update ingress-nginx\n</code></pre> <p>Create <code>nginx-ingress-values.yaml</code> to use when installing NGINX Ingress Controller</p> <pre><code># nginx-ingress-values.yaml\ncontroller:\n  replicaCount: 2\n  resources:\n    requests:\n      cpu: 100m\n      memory: 90Mi\n</code></pre> <p>Install the NGINX Ingress Controller using helm </p> <pre><code>helm install ingress-nginx ingress-nginx/ingress-nginx \\\n  --namespace ingress-nginx \\\n  --create-namespace \\\n  -f nginx-ingress-values.yaml\n</code></pre> <p>It may take a few minutes for the load balancer IP to be available. You can watch the status by running  <pre><code>kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch\n</code></pre> Look for the IP address provided in the <code>EXTERNAL-IP</code> field. </p>"},{"location":"digital-ocean/#step-2-update-dns-record","title":"Step 2: Update DNS record","text":"<p>Create a DNS record pointing to the <code>A</code> value. In this example we wiil use <code>opengovernance.domain.com</code> to create the DNS record. </p>"},{"location":"digital-ocean/#step-3-configuring-tls-certificate-using-cert-manager","title":"Step 3: Configuring TLS Certificate using <code>cert-manager</code>","text":"<p>Skip to Step 4 if you already have <code>cert-manager</code> installed.</p> <p>Add the official jetstack helm repository.</p> <p><pre><code>helm repo add jetstack https://charts.jetstack.io\n</code></pre> Update the helm repository. <pre><code>helm repo update jetstack\n</code></pre></p> <p>Create <code>cert-manager-values.yaml</code> to use when installing cert-manager</p> <pre><code># cert-manager-values.yaml\ncrds:\n  enabled: true\nprometheus:\n  enabled: false\n</code></pre> <p>Install the cert-manager chart using helm</p> <pre><code>helm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  -f cert-manager-values.yaml\n</code></pre> <p>Create a kubernetes manifest <code>cert-manager-issuer.yaml</code> to define a certificate issuer resource. Make sure to replace the <code>email</code> field with a valid email address.</p> <pre><code># cert-manager-issuer.yaml\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: letsencrypt-nginx\n  namespace: opengovernance\nspec:\n  acme:\n    email: &lt;a-valid-email-address&gt;\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-nginx-private-key\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\n</code></pre> <p>Deploy the above manifest <pre><code>kubectl apply -f cert-manager-issuer.yaml\n</code></pre></p> <p>Verify the issuer is ready <pre><code>kubectl get issuer -n opengovernance\n</code></pre> The output should be similar to below. The field <code>READY</code> should be <code>True</code></p> <p></p>"},{"location":"digital-ocean/#step-4-update-the-application-configuration","title":"Step 4: Update the Application configuration","text":"<p>Download and open the values.yaml file in an editor.</p> <pre><code>curl -O https://raw.githubusercontent.com/kaytu-io/kaytu-charts/main/charts/open-governance/values.yaml\n</code></pre> <p>The <code>values.yaml</code> must now look like the following</p> <pre><code>opengovernance:\n  replicaCount: 1\n  envType: dev\n  domain:\n    main: opengovernance.domain.com\n...\ndex:\n  configSecret:\n    create: false\n  config:\n    staticClients:\n      - id: public-client\n        name: 'Public Client'\n        redirectURIs:\n          - 'https://kaytu.app.domain/callback'\n          - 'http://kaytu.app.domain/callback'\n          - 'http://localhost:3000/callback'\n          - 'http://localhost:8080/callback'\n          - 'https://opengovernance.domain.com/callback'\n          - 'http://opengovernance.domain.com/callback'\n        public: true\n      - id: private-client\n        name: 'Private Client'\n        redirectURIs:\n          - 'https://kaytu.app.domain/callback'\n          - 'https://opengovernance.domain.com/callback'\n          - 'http://opengovernance.domain.com/callback'\n...\n</code></pre> <p>For an example refer to this values.yaml</p> <p>Apply these changes to the cluster using the following command </p> <pre><code>helm upgrade -f values.yaml opengovernance opengovernance/open-governance -n opengovernance \n</code></pre> <p>Once the changes have been applied, we need to restart the pod corresponding to dex.</p> <p>Retrieve the pod name:</p> <p><pre><code>POD_NAME=$(kubectl get pods -n opengovernance -l app.kubernetes.io/instance=opengovernance,app.kubernetes.io/name=dex -o jsonpath='{.items[*].metadata.name}')\n</code></pre> Delete the pod: <pre><code>kubectl delete pod $POD_NAME -n opengovernance\n</code></pre></p>"},{"location":"digital-ocean/#step-5-deploying-the-ingress","title":"Step 5: Deploying the Ingress","text":"<p>Create a kubernetes manifest <code>ingress.yaml</code> to define an ingress. Make sure to replace <code>&lt;your-custom-domain&gt;</code> with your domain.</p> <pre><code># ssuer.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: kaytu-ingress\n  namespace: opengovernance\n  annotations:\n    cert-manager.io/issuer: letsencrypt-nginx\nspec:\n  tls:\n    - hosts:\n        - &lt;your-custom-domain&gt;\n      secretName: letsencrypt-nginx\n  ingressClassName: nginx\n  rules:\n  - host: &lt;your-custom-domain&gt;\n    http:\n        paths:\n        - path: /\n          pathType: Prefix\n          backend:\n            service:\n              name: nginx-proxy\n              port:\n                number: 80\n</code></pre> <p>Deploy the above manifest</p> <pre><code>kubectl apply -f issuer.yaml\n</code></pre> <p>Confirm that the certificate is issued and <code>Ready</code>. The certificate might take a few minutes to get to <code>Ready</code> state.</p> <pre><code>kubectl get certificates -n opengovernance\n</code></pre>"},{"location":"fluent-kaytu/","title":"Installing Fluent(Fluentbit) in Kaytu to send logs to Cloudwatch","text":"<p>Assuming we have Kaytu configured on a kubernetes cluster, we need the following components:</p> <ul> <li> <p>An IAM account with the following permissions to write to cloudwatch logs.</p> </li> <li> <p>Credentials for the above account as a Kubernetes secret, in the cluster.</p> </li> </ul>"},{"location":"fluent-kaytu/#configuring-iam-account","title":"Configuring IAM account","text":"<ol> <li> <p>Create user with permissions to <code>create log groups</code>, <code>create log streams</code> and <code>write logs</code>. The following terraform templates can be used.</p> <p><pre><code># iamuser.tf\nresource \"aws_iam_user\" \"cloudwatch_user\" {\n    name = \"cloudwatch-user\"\n}\n</code></pre> <pre><code># iampolicy.tf\nresource \"aws_iam_policy\" \"cloudwatch_policy\" {\n    name        = \"CloudwatchLogs\"\n    description = \"Policy to allow writing to Cloudwatch Logs\"\n\n    policy = jsonencode({\n        Version = \"2012-10-17\"\n        Statement = [\n        {\n            Effect = \"Allow\"\n            Action = [\n            \"logs:CreateLogStream\",\n            \"logs:CreateLogGroup\",\n            \"logs:PutLogEvents\"\n            ]\n            Resource = \"*\"\n        }\n        ]\n    })\n\n}\n</code></pre></p> <pre><code># iam_policy_attachement.tf\nresource \"aws_iam_user_policy_attachment\" \"user_policy_attachment\" {\nuser       = aws_iam_user.cloudwatch_user.name\npolicy_arn = aws_iam_policy.cloudwatch_policy.arn\n}\n</code></pre> </li> <li> <p>Create credentials for the above created user. Recommend using the AWS cli.</p> <pre><code>aws iam create-access-key --user-name cloudwatch-user \n</code></pre> </li> </ol>"},{"location":"fluent-kaytu/#creating-a-kubernetes-secret-for-the-credentials","title":"Creating a Kubernetes secret for the credentials","text":"<p><code>kubectl</code> can be used for handling the secret creation. </p> <ol> <li> <p>Create a .env file:</p> <pre><code>AWS_ACCESS_KEY_ID=&lt;&lt;access-key&gt;&gt;\nAWS_SECRET_ACCESS_KEY=&lt;&lt;secret-access-key&gt;&gt;\n</code></pre> </li> <li> <p>Verify current context in .kubeconfig.</p> <pre><code>kubectl config current-context\n</code></pre> </li> <li> <p>Since the fluent operator is configured to reside in the <code>kaytu-octopus</code> namespace, add the credential secret in <code>kaytu-octopus</code> namespace.</p> <pre><code>kubectl create secret generic cloudwatch-user -n kaytu-octopus --from-env-file=&lt;path/to/.env&gt;\n</code></pre> </li> </ol>"},{"location":"fluent-kaytu/#result","title":"Result","text":"<p>Cloudwatch logs should have a log group <code>kaytu/application</code> with streams from all the installed application on Kaytu's cluster.</p>"},{"location":"kaytu-gke/","title":"Installing Opengovernance on GKE","text":"<ul> <li>make sure apis are enabled - especially caontainer.googleapi.com</li> <li>use terraform to setup infra</li> <li>download values.yaml</li> <li>update the <code>opengovernance.domain.main</code> and <code>dex.config.staticClients</code> fields in the yaml.</li> <li>use helm chart to deploy </li> <li>create static ip - <code>gcloud compute addresses create web-static-ip --global</code></li> <li>create A record for the IP</li> <li>create google managed certificate  <pre><code>apiVersion: networking.gke.io/v1\nkind: ManagedCertificate\nmetadata:\n  name: managed-certificate\n  namespace: opengovernance\nspec:\n  domains:\n    - kaytu.example.com\n</code></pre></li> <li>install ingress <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: kaytu-ingress\n  namespace: opengovernance\n  annotations:\n    kubernetes.io/ingress.global-static-ip-name: \"web-static-ip\"\n    networking.gke.io/managed-certificates: managed-certificate\nspec:\n  ingressClassName: gce\n  rules:\n    - host: kaytu.example.com\n      http:\n        paths:\n        - path: /\n          pathType: Prefix\n          backend:\n            service:\n              name: nginx-proxy\n              port:\n                number: 80\n</code></pre></li> </ul>"}]}